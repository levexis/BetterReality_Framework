using System.Collections;
using System.Reflection;
using NUnit.Framework;
using UnityEditor;
using UnityEngine;
using UnityEngine.TestTools;

namespace BetterReality.DevTools.Editor.Tests 
{
[TestFixture]    
public class DebugMenuTest
{
    private GameObject testObject;

    [SetUp]
    public void Setup()
    {
        testObject = new GameObject("TestObject");
        Selection.activeGameObject = testObject;
    }

    [TearDown]
    public void Teardown()
    {
        Object.DestroyImmediate(testObject);
        Selection.activeGameObject = null;
    }

    // A Test behaves as an ordinary method
    [Test]
    public void DevTools_Has_PrintGlobalPosition()
    {
        var packageType = typeof(DebugMenu);
        MethodInfo methodInfo = packageType.GetMethod("PrintGlobalPosition");
        Assert.IsNotNull(methodInfo,"PrintGlobalPosition method not found");
    }
    // these were generated by perplexity...
    [Test]
    public void PrintGlobalPosition_WithSelectedObject_LogsPosition()
    {
        // Arrange
        Selection.activeGameObject = testObject;
        testObject.transform.position = new Vector3(1, 2, 3);

        // Act
        LogAssert.Expect(LogType.Log, "TestObject is at (1.00, 2.00, 3.00)");
        DebugMenu.PrintGlobalPosition();

        // Assert
        // The assertion is handled by LogAssert.Expect
    }

    [Test]
    public void PrintRenderBounds_WithMeshRenderer_LogsBounds()
    {
        // Arrange
        Selection.activeGameObject = testObject;
        MeshRenderer meshRenderer = testObject.AddComponent<MeshRenderer>();
        meshRenderer.bounds = new Bounds(Vector3.zero, Vector3.one);

        DebugMenu.PrintRenderBounds();

        // Act
        LogAssert.Expect(LogType.Log, "Mesh Extents: (0.50, 0.50, 0.50)");
        LogAssert.Expect(LogType.Log, "Mesh Max: (0.50, 0.50, 0.50)");
        LogAssert.Expect(LogType.Log, "Mesh Min: (-0.50, -0.50, -0.50)");
        LogAssert.Expect(LogType.Log, "Mesh Size: (1.00, 1.00, 1.00)");
        LogAssert.Expect(LogType.Log, "Mesh Center: (0.00, 0.00, 0.00)");

        // Assert
        // The assertions are handled by LogAssert.Expect
    }

    [UnityTest]
    public IEnumerator FindAudioSource_WithAudioSources_LogsAudioSourceInfo()
    {
        // Arrange
        Selection.activeGameObject = testObject;
        AudioSource audioSource = testObject.AddComponent<AudioSource>();

        // Act
        LogAssert.Expect(LogType.Log, "TestObject is playing: False");
        DebugMenu.FindAudioSource();

        // Wait for a frame to ensure all logs are processed
        yield return null;

        // Assert
        // The assertion is handled by LogAssert.Expect
    }
}

}
